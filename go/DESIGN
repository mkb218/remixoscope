Sourcelist:
BEGIN <filename>
BEATS <beats, uint>
END

Args:
-sourcelist: filename
-samplerate: uint in 22050, 44100*, 48000
-soxpath: exec filename
-bands: duh
-beatlength: uint, samples. this is output, NOT sources. those are determined on a per-source basis
-tmpdir: tmp dir, better exist or i complain
-outputdir: better exist or i die
-outputextension: default is ".remix.wav"
remaining args are input files

prep:
generate sox format opts based on flags
soxformatopts = make([]string, 0)
append: -B
append: -b 16
append: -c 2
append: -e signed
append: -r <samplerate>

first stage, read sourcelist entries into package-level list of source structs:
type bucket struct {
    left, right float64
}
type beat struct {
    buckets []bucket
}
type source struct {
    basename string
    beats []beat
}
var sources []source

call getfileinfo to determine buflength.

2nd stage, sort sourcelist randomly, open new out

opensrcband takes args filename, buflength, band. it figures out remixspec args, sinc args, passes all sox opts to startsox, returns <-channel of audiobuffers, and sample length of file. this saves another invocation of soxi

type buffer {
    left, right []int16
}

when EOF is reached, channel is closed. if channel is closed by other end, goroutine returns

openinputband takes buflength, band. it iterates over input files, calling opensrcband on each one when the previous channel is closed. returns <-chan audiobuffer. if consumer closes channel, goroutine returns

startsox takes sox path, soxopts, pipeflags returns Cmd struct

openoutfile takes args channels []chan audiobuffer, outputname, tmpdir

mkpipe takes tmpdir and return pipe object
pipe object deletes fifo on closure

getfileinfo runs soxi